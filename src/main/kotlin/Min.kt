/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.vimeo

import contributors.*
import java.lang.ClassNotFoundException
import kotlinx.coroutines.*
import tasks.loadVideosChannels
import java.awt.EventQueue
import java.awt.Font
import java.awt.event.ActionListener
import java.awt.event.WindowAdapter
import java.awt.event.WindowEvent
import java.io.File
import java.lang.InstantiationException
import java.lang.IllegalAccessException
import java.util.logging.Level
import java.util.logging.Logger
import javax.swing.*
import kotlin.coroutines.CoroutineContext
import kotlin.io.path.appendText
import kotlin.system.exitProcess

/**
 *
 * @author shmue
 */
class Min : JFrame(), CoroutineScope {

    val job = Job()
    override val coroutineContext: CoroutineContext
        get() = job + Dispatchers.IO

    val outputFile = File("Results.txt").apply{createNewFile()}.toPath()
    var startTime = System.currentTimeMillis()
    var startNumInt = 0
    var endNumInt = 0
    var numProcessed = 0
    var numFound = 0
    var totalVidsToProcess = 0
    var counter = 1
    val chunkSizeInt by lazy { maxNumCoroutines!!.text.toString().toInt() / numInstances!!.text.toString().toInt() }
    fun <T, R> T.println(message: (T) -> R) = this.apply { println(message(this)) }
    fun startSearch(){
        var counter1 = 0
        totalVidsToProcess =
            endNum!!
                .text.println{"Counter: ${counter1++}"}
                .toString().println{"Counter: ${counter1++}"}
                .toInt().println{"Counter: ${counter1++}"}
                .apply{endNumInt = this} - startNum!!.println{"Counter: ${counter1++}"}
                .text.println{"Counter: ${counter1++}"}
                .toString().println{"Counter: ${counter1++}"}
                .toInt().println{"Counter: ${counter1++}"}
                .apply{startNumInt = this}.println{"Counter: ${counter1++}"}
        jProgressBar1!!.maximum = totalVidsToProcess
        counter = startNumInt
        println("startNum: $startNumInt, endNum: $endNumInt, totalVids: $totalVidsToProcess")
        repeat(numInstances!!.text.toInt()) {
            println("New instance created")
            startNewCalculation()
        }
    }
    fun startNewCalculation(){
        println("Counter is less than total vids to process: ${counter < endNumInt}")
        if(counter < endNumInt){
            var endNumber = counter + chunkSizeInt - 1
            if(endNumber > endNumInt){
                endNumber = endNumInt //don't go over
            }
            loadVideos(counter, endNumber)
            counter = endNumber + 1
        }
    }
    fun clearResults(){
        numProcessed = 0
        jProgressBar1!!.value = 0
        totalVidsToProcess = 0
        startTime = System.currentTimeMillis()
        vidsDone!!.text = "0 (found: 0)"
        vidPerSec!!.text = "0.0"
        percentDone!!.text = "0%"
    }
    fun updateVideos(){
        numProcessed++
        jProgressBar1!!.value++
        vidsDone!!.text = "$numProcessed (found: $numFound)"
        vidPerSec!!.text = (numProcessed/((System.currentTimeMillis() - startTime) / 1000.0)).toString()
        percentDone!!.text = "${(numProcessed/totalVidsToProcess)*100}%"
    }
    fun videoFound(video: Video){
        numFound++
        outputFile.appendText("$baseUrl${video.id}\n")
        println("Video found: $video")
    }
    private fun Job.setUpCancellation() {
        val loadingJob = this
        // cancel the loading job if the 'cancel' button was clicked
        val listener = ActionListener {
            loadingJob.cancel()
        }
        cancelJButton!!.addActionListener(listener)
        // update the status and remove the listener after the loading job is completed
        launch {
            loadingJob.join()
            cancelJButton!!.removeActionListener(listener)
        }
    }
    fun loadVideos(start: Int, end: Int) {
        val vimeoService = createVimeoService()
        launch(Dispatchers.Default) {
            loadVideosChannels(vimeoService, start..end) { video, completed ->
                withContext(Dispatchers.IO) {
                    updateVideos()
                    if(video.title.matchesVideoConstraint()) videoFound(video)
                }
                if(completed) startNewCalculation()
            }
        }.setUpCancellation()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private fun initComponents() {
        startJButton = JButton()
        cancelJButton = JButton()
        jProgressBar1 = JProgressBar()
        startNum = JTextField()
        endNum = JTextField()
        numInstances = JTextField()
        jLabel1 = JLabel()
        maxNumCoroutines = JTextField()
        jLabel2 = JLabel()
        jLabel3 = JLabel()
        jLabel4 = JLabel()
        jLabel5 = JLabel()
        jLabel6 = JLabel()
        jLabel7 = JLabel()
        vidPerSec = JLabel()
        vidsDone = JLabel()
        percentDone = JLabel()
        defaultCloseOperation = WindowConstants.EXIT_ON_CLOSE
        startJButton!!.text = "Start"
        startJButton!!.addActionListener {
            //480316303
            println("start button clicked")
            cancelJButton!!.doClick()
            clearResults()
            startSearch()
        }
        cancelJButton!!.text = "Cancel"
        cancelJButton!!.addActionListener {  }
        jLabel1!!.text = "Start:"
        jLabel2!!.text = "End:"
        jLabel3!!.text = "Number of instances:"
        jLabel4!!.text = "Max num coroutines running at once:"
        jLabel5!!.text = "Videos/sec:"
        jLabel6!!.text = "Num vids done:"
        jLabel7!!.text = "% done:"
        vidPerSec!!.font = Font("Tahoma", 1, 11) // NOI18N
        vidPerSec!!.text = "999"
        vidsDone!!.font = Font("Tahoma", 1, 11) // NOI18N
        vidsDone!!.text = "888"
        percentDone!!.font = Font("Tahoma", 1, 11) // NOI18N
        percentDone!!.text = "777"
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(
                                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE.toInt())
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1, GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel2, GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel3, GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel4, GroupLayout.Alignment.TRAILING)
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                .addComponent(
                                                    maxNumCoroutines,
                                                    GroupLayout.Alignment.TRAILING,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    188,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(startNum, GroupLayout.Alignment.TRAILING)
                                                .addComponent(endNum, GroupLayout.Alignment.TRAILING)
                                                .addComponent(numInstances, GroupLayout.Alignment.TRAILING)
                                        )
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(
                                                    jProgressBar1,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addGroup(
                                                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE.toInt())
                                                        .addComponent(startJButton)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(cancelJButton)
                                                )
                                                .addGroup(
                                                    layout.createSequentialGroup()
                                                        .addGroup(
                                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabel5)
                                                                .addComponent(jLabel6)
                                                                .addComponent(jLabel7)
                                                        )
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(
                                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                .addComponent(vidPerSec)
                                                                .addComponent(vidsDone)
                                                                .addComponent(percentDone)
                                                        )
                                                        .addGap(0, 0, Short.MAX_VALUE.toInt())
                                                )
                                        )
                                        .addContainerGap()
                                )
                        )
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(
                                    startNum,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(jLabel1)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(
                                    endNum,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(jLabel2)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(
                                    numInstances,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(jLabel3)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(
                                    maxNumCoroutines,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(jLabel4)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(vidPerSec)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(vidsDone)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(percentDone)
                                )
                        )
                        .addPreferredGap(
                            LayoutStyle.ComponentPlacement.RELATED,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addComponent(
                            jProgressBar1,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(cancelJButton)
                                .addComponent(startJButton)
                        )
                        .addContainerGap()
                )
        )
        addWindowListener(object : WindowAdapter() {
            override fun windowClosing(e: WindowEvent?) {
                job.cancel()
                cancelJButton!!.doClick()
                exitProcess(0)
            }
        })
        pack()
    } // </editor-fold>

    // Variables declaration - do not modify
    var cancelJButton: JButton? = null
    private var endNum: JTextField? = null
    private var jLabel1: JLabel? = null
    private var jLabel2: JLabel? = null
    private var jLabel3: JLabel? = null
    private var jLabel4: JLabel? = null
    private var jLabel5: JLabel? = null
    private var jLabel6: JLabel? = null
    private var jLabel7: JLabel? = null
    private var jProgressBar1: JProgressBar? = null
    private var maxNumCoroutines: JTextField? = null
    private var numInstances: JTextField? = null
    private var percentDone: JLabel? = null
    var startJButton: JButton? = null
    private var startNum: JTextField? = null
    private var vidPerSec: JLabel? = null
    private var vidsDone: JLabel? = null // End of variables declaration

    companion object {
        /**
         * @param args the command line arguments
         */
        @JvmStatic
        fun main(args: Array<String>) {
            /* Set the Windows look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
            try {
                for (info in UIManager.getInstalledLookAndFeels()) {
                    if ("Windows" == info.name) {
                        UIManager.setLookAndFeel(info.className)
                        break
                    }
                }
            } catch (ex: ClassNotFoundException) {
                Logger.getLogger(Min::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: InstantiationException) {
                Logger.getLogger(Min::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: IllegalAccessException) {
                Logger.getLogger(Min::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: UnsupportedLookAndFeelException) {
                Logger.getLogger(Min::class.java.name).log(Level.SEVERE, null, ex)
            }
            //</editor-fold>

            /* Create and display the form */EventQueue.invokeLater { Min().isVisible = true }
        }
    }

    /**
     * Creates new form Min
     */
    init {
        initComponents()
    }
}